// Generated by CoffeeScript 1.6.2
var express, expressServer, http, io, port, server, socket_io, _ref,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

express = require("express");

http = require("http");

socket_io = require("socket.io");

expressServer = express();

expressServer.configure(function() {
  expressServer.use(express.bodyParser());
  expressServer.use(function(req, res, next) {
    if (req.url === "/") {
      req.url = "/page.html";
    }
    return next();
  });
  expressServer.use(express["static"]("" + __dirname + "/public", {
    maxAge: 31557600000
  }, function(err) {
    return console.log("Static: " + err);
  }));
  return expressServer.use(expressServer.router);
});

server = http.createServer(expressServer);

io = socket_io.listen(server);

io.set("log level", 0);

io.sockets.on("connection", function(socket) {
  socket.wip = [];
  socket.on("getWIPs", function(callback) {
    var _ref;

    return typeof callback === "function" ? callback((_ref = []).concat.apply(_ref, io.sockets.clients().filter(function(x) {
      return x !== socket;
    }).map(function(x) {
      return x.wip;
    }))) : void 0;
  });
  socket.on("addWIP", function(rasterId, callback) {
    if (io.sockets.clients().some(function(x) {
      return __indexOf.call(x.wip, rasterId) >= 0;
    })) {
      return typeof callback === "function" ? callback({
        success: false
      }) : void 0;
    } else {
      socket.wip.push(rasterId);
      socket.broadcast.emit("addedWIP", rasterId);
      return typeof callback === "function" ? callback({
        success: true
      }) : void 0;
    }
  });
  return socket.on("removeWIP", function(rasterId) {
    if (__indexOf.call(socket.wip, rasterId) < 0) {
      return typeof callback === "function" ? callback({
        success: false
      }) : void 0;
    } else {
      socket.wip = socket.wip.filter(function(x) {
        return x !== rasterId;
      });
      socket.broadcast.emit("removedWIP", rasterId);
      return typeof callback === "function" ? callback({
        success: true
      }) : void 0;
    }
  });
});

server.listen((port = (_ref = process.env.PORT) != null ? _ref : 5080), function() {
  return console.log("Listening on port " + port);
});
