// Generated by CoffeeScript 1.4.0
var extend;

extend = function(obj, mixin) {
  var method, name;
  for (name in mixin) {
    method = mixin[name];
    obj[name] = method;
  }
  return obj;
};

define(["dojo/_base/declare", "dijit/_WidgetBase", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dojo/text!./ClassifyWidget/templates/ClassifyWidget.html", "dijit/Dialog", "dijit/layout/BorderContainer", "dijit/layout/ContentPane", "dijit/form/TextBox", "dijit/form/DropDownButton", "dijit/DropDownMenu", "dijit/MenuItem", "dijit/MenuSeparator", "esri/map", "esri/layers/FeatureLayer", "esri/tasks/query", "esri/tasks/geometry"], function(declare, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, template, Dialog) {
  var showError;
  showError = function(content) {
    var errBox;
    errBox = new Dialog({
      title: "Error",
      content: content
    });
    errBox.startup();
    errBox.show();
    return errBox;
  };
  return declare([_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin], {
    templateString: template,
    baseClass: "classifyWidget",
    map: null,
    imageServiceUrlInput: null,
    signaturesUrlInput: null,
    geometryServiceUrlInput: null,
    imageServiceLayer: null,
    _setImageLayer: function(options, callback) {
      var _ref,
        _this = this;
      if ((_ref = this.imageServiceUrlInput.get("value")) === "" || _ref === null || _ref === (void 0)) {
        return showError("ImageServiceLayer: Service URL Required.");
      }
      if (this.imageServiceLayer != null) {
        this.map.removeLayer(this.imageServiceLayer);
      }
      this.imageServiceLayer = new esri.layers.ArcGISImageServiceLayer(this.imageServiceUrlInput.get("value"), options);
      dojo.connect(this.imageServiceLayer, "onLoad", function() {
        _this.map.addLayer(_this.imageServiceLayer);
        return typeof callback === "function" ? callback() : void 0;
      });
      return dojo.connect(this.imageServiceLayer, "onError", function(error) {
        return showError("ImageServiceLayer: " + error.message);
      });
    },
    addImageServiceLayer: function() {
      var _ref,
        _this = this;
      if ((_ref = this.geometryServiceUrlInput.get("value")) === "" || _ref === null || _ref === (void 0)) {
        return showError("GeometryService: Service URL Required.");
      }
      return this._setImageLayer(null, function() {
        var geometryService;
        geometryService = new esri.tasks.GeometryService(_this.geometryServiceUrlInput.get("value"));
        dojo.connect(geometryService, "onError", function(error) {
          return showError("GeometryService: " + error.message);
        });
        return geometryService.project(extend(new esri.tasks.ProjectParameters, {
          geometries: [_this.imageServiceLayer.initialExtent],
          outSR: _this.map.extent.spatialReference
        }), function(_arg) {
          var extent;
          extent = _arg[0];
          return _this.map.setExtent(extent);
        });
      });
    },
    clipImageToSignatureFeatures: function() {
      var fun1, _ref, _ref1,
        _this = this;
      if ((_ref = this.signaturesUrlInput.get("value")) === "" || _ref === null || _ref === (void 0)) {
        return showError("FeatureLayer: Service URL Required.");
      }
      if ((_ref1 = this.geometryServiceUrlInput.get("value")) === "" || _ref1 === null || _ref1 === (void 0)) {
        return showError("GeometryService: Service URL Required.");
      }
      fun1 = function() {
        var signaturesLayer;
        signaturesLayer = new esri.layers.FeatureLayer(_this.signaturesUrlInput.get("value"), {
          outFields: ["FID", "SIGURL"]
        });
        dojo.connect(signaturesLayer, "onLoad", function() {
          return signaturesLayer.selectFeatures(extend(new esri.tasks.Query, {
            geometry: _this.map.extent,
            spatialRelationship: esri.tasks.Query.SPATIAL_REL_INTERSECTS
          }), esri.layers.FeatureLayer.SELECTION_NEW, function(features) {
            var f, geometryService;
            if (features.length === 0) {
              return showError("No features found within current view extent.");
            }
            geometryService = new esri.tasks.GeometryService(_this.geometryServiceUrlInput.get("value"));
            dojo.connect(geometryService, "onError", function(error) {
              return showError("GeometryService: " + error.message);
            });
            return geometryService.union((function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = features.length; _i < _len; _i++) {
                f = features[_i];
                _results.push(f.geometry);
              }
              return _results;
            })(), function(geo1) {
              return geometryService.intersect([geo1], _this.imageServiceLayer.fullExtent, function(_arg) {
                var geo2, _ref2;
                geo2 = _arg[0];
                if (!((geo2 != null ? (_ref2 = geo2.rings) != null ? _ref2.length : void 0 : void 0) > 0)) {
                  return showError("No features found within ImageServiceLayer Extent.");
                }
                return geometryService.intersect([geo2], _this.map.extent, function(_arg1) {
                  var geo3, _ref3;
                  geo3 = _arg1[0];
                  if (!((geo3 != null ? (_ref3 = geo3.rings) != null ? _ref3.length : void 0 : void 0) > 0)) {
                    return showError("No features found within ImageServiceLayer and current view Extent.");
                  }
                  return _this._setImageLayer({
                    imageServiceParameters: extend(new esri.layers.ImageServiceParameters, {
                      renderingRule: extend(new esri.layers.RasterFunction, {
                        functionName: "Clip",
                        "arguments": {
                          ClippingGeometry: geo3,
                          ClippingType: 1
                        },
                        variableName: "Raster"
                      })
                    })
                  });
                });
              });
            });
          });
        });
        return dojo.connect(signaturesLayer, "onError", function(error) {
          return showError("FeatureLayer: " + error.message);
        });
      };
      if (this.imageServiceLayer != null) {
        return fun1();
      }
      return this._setImageLayer(null, fun1);
    },
    getClassifiedImage: function() {
      var fun1, _ref, _ref1,
        _this = this;
      if ((_ref = this.signaturesUrlInput.get("value")) === "" || _ref === null || _ref === (void 0)) {
        return showError("FeatureLayer: Service URL Required.");
      }
      if ((_ref1 = this.geometryServiceUrlInput.get("value")) === "" || _ref1 === null || _ref1 === (void 0)) {
        return showError("GeometryService: Service URL Required.");
      }
      fun1 = function() {
        var signaturesLayer;
        signaturesLayer = new esri.layers.FeatureLayer(_this.signaturesUrlInput.get("value"), {
          outFields: ["FID", "SIGURL"]
        });
        dojo.connect(signaturesLayer, "onLoad", function() {
          return signaturesLayer.selectFeatures(extend(new esri.tasks.Query, {
            geometry: _this.map.extent,
            spatialRelationship: esri.tasks.Query.SPATIAL_REL_INTERSECTS
          }), esri.layers.FeatureLayer.SELECTION_NEW, function(features) {
            var f, geometryService;
            if (features.length === 0) {
              return showError("No features found within current view extent.");
            }
            geometryService = new esri.tasks.GeometryService(_this.geometryServiceUrlInput.get("value"));
            dojo.connect(geometryService, "onError", function(error) {
              return showError("GeometryService: " + error.message);
            });
            return geometryService.union((function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = features.length; _i < _len; _i++) {
                f = features[_i];
                _results.push(f.geometry);
              }
              return _results;
            })(), function(geo1) {
              return geometryService.intersect([geo1], _this.imageServiceLayer.fullExtent, function(_arg) {
                var geo2, _ref2;
                geo2 = _arg[0];
                if (!((geo2 != null ? (_ref2 = geo2.rings) != null ? _ref2.length : void 0 : void 0) > 0)) {
                  return showError("No features found within ImageServiceLayer Extent.");
                }
                return geometryService.intersect([geo2], _this.map.extent, function(_arg1) {
                  var geo3, _ref3;
                  geo3 = _arg1[0];
                  if (!((geo3 != null ? (_ref3 = geo3.rings) != null ? _ref3.length : void 0 : void 0) > 0)) {
                    return showError("No features found within ImageServiceLayer and current view Extent.");
                  }
                  return _this._setImageLayer({
                    imageServiceParameters: extend(new esri.layers.ImageServiceParameters, {
                      renderingRule: extend(new esri.layers.RasterFunction, {
                        functionName: "funchain1",
                        "arguments": {
                          ClippingGeometry: geo3,
                          SignatureFile: features[0].attributes.SIGURL
                        },
                        variableName: "Raster"
                      })
                    })
                  });
                });
              });
            });
          });
        });
        return dojo.connect(signaturesLayer, "onError", function(error) {
          return showError("FeatureLayer: " + error.message);
        });
      };
      if (this.imageServiceLayer != null) {
        return fun1();
      }
      return this._setImageLayer(null, fun1);
    }
  });
});
